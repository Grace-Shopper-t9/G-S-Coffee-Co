import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

const initialState = { coffee: [], order: [], user: [] };

export const fetchOneCartAsync = createAsyncThunk("/carts", async (cartId) => {
  const { data } = await axios.get(`/api/carts/${cartId}`);
  return data;
});
export const fetchOneOrderAsync = createAsyncThunk(
  "/orders",
  async ({ orderId, userId }) => {
    console.log(
      "stuff the api is receiveing from axios request:",
      "userId: ",
      userId,
      "orderId: ",
      orderId
    );
    const { data } = await axios.get(`/api/orders/${orderId}`, userId);
    console.log(data);
    return data;
  }
);
export const fetchUserAsync = createAsyncThunk("/users", async (userId) => {
  const { data } = await axios.get(`/api/users/${userId}`);
  return data;
});
export const editOrderStatusAsync = createAsyncThunk(
  "orders/editOrderStatus",
  async ({ orderId, fulfilled }) => {
    try {
      const { data } = await axios.put(`/api/orders/${orderId}`, {
        fulfilled,
      });
      return data;
    } catch (error) {
      console.error(error);
    }
  }
);
export const removeItemFromCartAsync = createAsyncThunk(
  "coffees/editCartContents",
  async ({ coffeeId, cartId }) => {
    console.log("apI update request...cartId:", cartId);
    try {
      const { data } = await axios.put(`/api/coffees/${coffeeId}`, {
        cartId,
      });
      return data;
    } catch (error) {
      console.error(error);
    }
  }
);
// export const addOrderToNewUserAsync = createAsyncThunk(
//   "order/addOrderToNewUser",
//   async () => {
//     const { data } = await axios.post("/api/orders", {});
//     console.log(data);
//     return data;
//   }
// );

export const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder.addCase(fetchOneCartAsync.fulfilled, (state, action) => {
      state.coffee = action.payload.coffees;
    });
    builder.addCase(fetchOneOrderAsync.fulfilled, (state, action) => {
      state.order = action.payload;
    });
    builder.addCase(fetchUserAsync.fulfilled, (state, action) => {
      state.user = action.payload;
    });
    builder.addCase(editOrderStatusAsync.fulfilled, (state, action) => {
      return action.payload;
    });
    builder.addCase(removeItemFromCartAsync.fulfilled, (state, action) => {
      const newState = state.coffee.filter(
        (coffee) => coffee.id !== action.payload.id
      );
      state.coffee = newState;
    });
    // builder.addCase(addOrderToNewUserAsync.fulfilled, (state, action) => {
    //   state.order = action.payload;
    // });
  },
});

export const selectCart = (state) => state.cart;

export default cartSlice.reducer;
